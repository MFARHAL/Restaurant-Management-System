{
  "name": "react-themeable",
  "version": "1.0.1",
  "description": "Utility for making React components easily themeable",
  "main": "dist/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "babel src -d dist",
    "prepublish": "npm run build"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/markdalgleish/react-themeable.git"
  },
  "author": {
    "name": "Mark Dalgleish"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/markdalgleish/react-themeable/issues"
  },
  "homepage": "https://github.com/markdalgleish/react-themeable#readme",
  "dependencies": {
    "object-assign": "^3.0.0"
  },
  "devDependencies": {
    "babel": "^5.6.14"
  },
  "readme": "# react-themeable\n\nUtility for making React components easily themeable.\n\n**This project is still experimental, so feedback from component authors would be greatly appreciated!**\n\n## Why?\n\nThe React community is highly fragmented when it comes to styling. How do we write components that can happily co-exist with all of these competing approaches?\n\nWith react-themeable, you can support custom themes provided by [CSS Modules](https://github.com/css-modules/css-modules), [Radium](http://projects.formidablelabs.com/radium/), [React Style](https://github.com/js-next/react-style), or even plain old style objects as easily as this:\n\n```js\n<MyComponent theme={theme} />\n```\n\n## Install\n\n`npm install --save react-themeable`\n\n## Usage\n\n`react-themeable` exposes just a single function.\n\nThis function is designed to accept a `theme` prop inside of your `render` method. This then returns a small helper function that accepts a key and a series of classes/style names.\n\nThis helper function detects whether a theme is class or style based, and creates the appropriate attributes for you.\n\nFor example:\n\n```js\nimport React, { Component } from 'react';\nimport themeable from 'react-themeable';\n\nclass MyComponent extends Component {\n  render() {\n    const theme = themeable(this.props.theme);\n\n    return (\n      <div {...theme(1, 'root')}>\n        <div {...theme(2, 'foo', 'bar')}>Foo Bar</div>\n        <div {...theme(3, 'baz')}>Baz</div>\n      </div>\n    );\n  }\n}\n```\n\nA theme can now be passed to your component like so:\n\n### CSS Modules\n\n```css\n.foo { color: red; }\n.foo:hover { color: green; }\n.bar { color: blue; }\n```\n\n```js\nimport theme from './MyComponentTheme.css';\n...\n<MyComponent theme={theme} />\n```\n\n### Radium\n\n```js\nimport Radium from 'radium';\n\nconst theme = {\n  foo: {\n    color: 'red',\n    ':hover': {\n      color: 'green'\n    }\n  },\n  bar: {\n    color: 'blue'\n  }\n};\n\nconst ThemedMyComponent = Radium(MyComponent);\n...\n<ThemedMyComponent theme={theme} />\n```\n\n### React Style\n\n```js\nimport StyleSheet from 'react-style';\n\nconst theme = StyleSheet.create({\n  foo: {\n    color: 'red'\n  },\n  bar: {\n    color: 'blue'\n  }\n});\n...\n<MyComponent theme={theme} />\n```\n\n### Plain style objects\n\n```js\nconst theme = {\n  foo: {\n    color: 'red'\n  },\n  bar: {\n    color: 'blue'\n  }\n};\n...\n<MyComponent theme={theme} />\n```\n\n## License\n\n[MIT](http://markdalgleish.mit-license.org)\n",
  "readmeFilename": "README.md",
  "_id": "react-themeable@1.0.1",
  "_from": "react-themeable@^1.0.1"
}

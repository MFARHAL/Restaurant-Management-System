{
  "name": "react-autosuggest",
  "version": "3.6.0",
  "description": "WAI-ARIA compliant React autosuggest component",
  "main": "dist/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/moroshko/react-autosuggest.git"
  },
  "author": {
    "name": "Misha Moroshko",
    "email": "michael.moroshko@gmail.com"
  },
  "scripts": {
    "start": "mkdir -p demo/dist && npm run copy-static-files && node server",
    "lint": "eslint src demo/src test server.js demo/standalone/app.js webpack.dev.config.js webpack.gh-pages.config.js webpack.standalone.config.js webpack.standalone-demo.config.js",
    "test": "mocha test/index.js --compilers js:babel-core/register",
    "copy-static-files": "cp demo/src/index.html demo/src/components/App/components/Examples/components/Basic/autosuggest.css demo/dist/",
    "dist": "rm -rf dist && mkdir dist && babel src -d dist",
    "demo-dist": "rm -rf demo/dist && mkdir demo/dist && npm run copy-static-files && webpack --config webpack.gh-pages.config.js",
    "standalone": "webpack --config webpack.standalone.config.js && webpack --config webpack.standalone-demo.config.js",
    "prebuild": "npm run lint && npm test",
    "build": "npm run dist && npm run standalone",
    "gh-pages-build": "npm run prebuild && npm run demo-dist",
    "postversion": "git push && git push --tags",
    "prepublish": "npm run dist && npm run standalone"
  },
  "dependencies": {
    "react-autowhatever": "^3.1.0",
    "react-redux": "^4.4.0",
    "redux": "^3.3.1"
  },
  "peerDependencies": {
    "react": "^0.14.7 || ^15.0.0-rc.1"
  },
  "devDependencies": {
    "autoprefixer-loader": "^3.2.0",
    "autosuggest-highlight": "^2.1.1",
    "babel-cli": "^6.6.5",
    "babel-core": "^6.6.5",
    "babel-eslint": "^5.0.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-react-transform": "^2.0.2",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "chai": "^3.5.0",
    "css-loader": "^0.23.1",
    "es6-promise": "^3.1.2",
    "eslint": "2.2.0",
    "eslint-plugin-react": "^4.2.0",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.8.5",
    "happypack": "^1.1.3",
    "ismobilejs": "^0.4.0",
    "isomorphic-fetch": "^2.2.1",
    "jsdom": "^8.1.0",
    "less": "^2.6.1",
    "less-loader": "^2.2.2",
    "mocha": "^2.4.5",
    "react": "^15.0.0-rc.1",
    "react-addons-test-utils": "^15.0.0-rc.1",
    "react-dom": "^15.0.0-rc.1",
    "react-transform-hmr": "^1.0.3",
    "redux-thunk": "^1.0.3",
    "sinon": "^1.17.3",
    "sinon-chai": "^2.8.0",
    "style-loader": "^0.13.0",
    "svgo": "^0.6.1",
    "svgo-loader": "^1.1.0",
    "url-loader": "^0.5.7",
    "webpack": "^1.12.14",
    "webpack-dev-server": "^1.14.1"
  },
  "files": [
    "dist"
  ],
  "keywords": [
    "autosuggest",
    "autocomplete",
    "auto-suggest",
    "auto-complete",
    "auto suggest",
    "auto complete",
    "react autosuggest",
    "react autocomplete",
    "react auto-suggest",
    "react auto-complete",
    "react auto suggest",
    "react auto complete",
    "react-autosuggest",
    "react-autocomplete",
    "react-auto-suggest",
    "react-auto-complete",
    "react-component"
  ],
  "license": "MIT",
  "readme": "<a href=\"https://codeship.com/projects/67868\" target=\"_blank\">\n  <img src=\"https://img.shields.io/codeship/41810250-aa07-0132-fbf4-4e62e8945e03/master.svg?style=flat-square\"\n       alt=\"Build Status\" />\n</a>\n<a href=\"http://issuestats.com/github/moroshko/react-autosuggest\" target=\"_blank\">\n  <img src=\"http://issuestats.com/github/moroshko/react-autosuggest/badge/issue?style=flat-square\"\n       alt=\"Issues stats\" />\n</a>\n<a href=\"http://issuestats.com/github/moroshko/react-autosuggest\" target=\"_blank\">\n  <img src=\"https://img.shields.io/badge/pull%20requests%20closed%20in-5%20days-green.svg?style=flat-square\"\n       alt=\"Pull Requests stats\" />\n</a>\n<a href=\"https://npmjs.org/package/react-autosuggest\" target=\"_blank\">\n  <img src=\"https://img.shields.io/npm/dm/react-autosuggest.svg?style=flat-square\"\n       alt=\"NPM Downloads\" />\n</a>\n<a href=\"https://npmjs.org/package/react-autosuggest\" target=\"_blank\">\n  <img src=\"https://img.shields.io/npm/v/react-autosuggest.svg?style=flat-square\"\n       alt=\"NPM Version\" />\n</a>\n\n# React Autosuggest\n\nWAI-ARIA compliant autosuggest component built in React\n\n## Demo\n\nCheck out the <a href=\"http://react-autosuggest.js.org\" target=\"_blank\">Homepage</a> and the <a href=\"http://codepen.io/collection/DkkYaQ\" target=\"_blank\">Codepen examples</a>.\n\n## Features\n\n* <a href=\"https://www.w3.org/TR/wai-aria-practices/#autocomplete\" target=\"_blank\">WAI-ARIA compliant</a>, with support for ARIA attributes and keyboard interactions\n* Plugs in nicely to Flux and <a href=\"http://redux.js.org\" target=\"_blank\">redux</a> applications\n* Full control over [suggestions rendering](#renderSuggestionProp)\n* Suggestions can be presented as <a href=\"http://codepen.io/moroshko/pen/LGNJMy\" target=\"_blank\">plain list</a> or <a href=\"http://codepen.io/moroshko/pen/qbRNjV\" target=\"_blank\">multiple sections</a>\n* Suggestions can be retrieved <a href=\"http://codepen.io/moroshko/pen/EPZpev\" target=\"_blank\">asynchronously</a>\n* Supports styling using <a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\">CSS Modules</a>, <a href=\"https://github.com/FormidableLabs/radium\" target=\"_blank\">Radium</a>, <a href=\"https://facebook.github.io/react/tips/inline-styles.html\" target=\"_blank\">Inline styles</a>, global CSS, [and more](#themeProp)\n* You decide [when to show suggestions](#shouldRenderSuggestionsProp) (e.g. when user types 2 or more characters)\n* [Pass through props to the input field](#inputPropsProp) (e.g. placeholder, type, onChange, onBlur)\n* [onSuggestionSelected](#onSuggestionSelectedProp) hook\n* Thoroughly tested\n\n## Installation\n\n```shell\nnpm install react-autosuggest --save\n```\n\n## Basic Usage\n\n```js\nimport Autosuggest from 'react-autosuggest';\n\nconst languages = [\n  {\n    name: 'C',\n    year: 1972\n  },\n  {\n    name: 'Elm',\n    year: 2012\n  },\n  ...\n];\n\nfunction getSuggestions(value) {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  \n  return inputLength === 0 ? [] : languages.filter(lang =>\n    lang.name.toLowerCase().slice(0, inputLength) === inputValue\n  );\n}\n\nfunction getSuggestionValue(suggestion) { // when suggestion selected, this function tells\n  return suggestion.name;                 // what should be the value of the input\n}\n\nfunction renderSuggestion(suggestion) {\n  return (\n    <span>{suggestion.name}</span>\n  );\n}\n\nclass Example extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: getSuggestions('')\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSuggestionsUpdateRequested = this.onSuggestionsUpdateRequested.bind(this);\n  }\n\n  onChange(event, { newValue }) {\n    this.setState({\n      value: newValue\n    });\n  }\n\n  onSuggestionsUpdateRequested({ value }) {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <Autosuggest suggestions={suggestions}\n                   onSuggestionsUpdateRequested={this.onSuggestionsUpdateRequested}\n                   getSuggestionValue={getSuggestionValue}\n                   renderSuggestion={renderSuggestion}\n                   inputProps={inputProps} />\n    );\n  }\n}\n```\n\n## Props\n\n* [`suggestions`](#suggestionsProp)\n* [`onSuggestionsUpdateRequested`](#onSuggestionsUpdateRequestedProp)\n* [`getSuggestionValue`](#getSuggestionValueProp)\n* [`renderSuggestion`](#renderSuggestionProp)\n* [`inputProps`](#inputPropsProp)\n* [`shouldRenderSuggestions`](#shouldRenderSuggestionsProp)\n* [`multiSection`](#multiSectionProp)\n* [`renderSectionTitle`](#renderSectionTitleProp)\n* [`getSectionSuggestions`](#getSectionSuggestionsProp)\n* [`onSuggestionSelected`](#onSuggestionSelectedProp)\n* [`focusInputOnSuggestionClick`](#focusInputOnSuggestionClickProp)\n* [`theme`](#themeProp)\n* [`id`](#idProp)\n\n<a name=\"suggestionsProp\"></a>\n#### suggestions (required)\n\nAn array of suggestions to display.\n\nFor a plain list of suggestions, every item in `suggestions` should be a single suggestion. It's up to you what shape every suggestion takes. For example:\n\n```js\nconst suggestions = [\n  {\n    text: 'Apple'\n  },\n  {\n    text: 'Banana'\n  },\n  {\n    text: 'Cherry'\n  },\n  {\n    text: 'Grapefruit'\n  },\n  {\n    text: 'Lemon'\n  }\n];\n```\n\nTo display [multiple sections](#multiSectionProp), every item in `suggestions` should be a single section. Again, it's up to you what shape every section takes. For example:\n\n```js\nconst suggestions = [\n  {\n    title: 'A',\n    suggestions: [\n      {\n        id: '100',\n        text: 'Apple'\n      },\n      {\n        id: '101',\n        text: 'Apricot'\n      }\n    ]\n  },\n  {\n    title: 'B',\n    suggestions: [\n      {\n        id: '102',\n        text: 'Banana'\n      }\n    ]\n  },\n  {\n    title: 'C',\n    suggestions: [\n      {\n        id: '103',\n        text: 'Cherry'\n      }\n    ]\n  }\n];\n```\n\n**Note:**\n\n* It's totally up to you what shape suggestions take!\n* The initial value of `suggestions` should match the initial value of `inputProps.value`. This will make sure that, if input has a non-empty initial value, and it's focused, the right suggestions are displayed.\n\n<a name=\"onSuggestionsUpdateRequestedProp\"></a>\n#### onSuggestionsUpdateRequested (optional)\n\nNormally, you would want to update [`suggestions`](#suggestionsProp) as user types. You might also want to update suggestions when user selects a suggestion or the input loses focus (so that, next time the input gets focus, suggestions will be up to date).\n\nAutosuggest will call `onSuggestionsUpdateRequested` every time it thinks you might want to update suggestions.\n\n`onSuggestionsUpdateRequested` has the following signature:\n\n```js\nfunction onSuggestionsUpdateRequested({ value, reason })\n```\n\nwhere:\n\n* `value` - The current value of the input\n* `reason` - string describing why Autosuggest thinks you might want to update suggestions. The possible values are:\n  * `'type'` - usually means that user typed something, but can also be that they pressed Backspace, pasted something into the field, etc.\n  * `'click'` - user clicked (or tapped) a suggestion\n  * `'enter'` - user pressed Enter\n  * `'escape'` - user pressed Escape\n  * `'blur'` - input lost focus\n\n<a name=\"getSuggestionValueProp\"></a>\n#### getSuggestionValue (required)\n\nWhen user navigates the suggestions using the Up and Down keys, <a href=\"https://www.w3.org/TR/wai-aria-practices/#autocomplete\" target=\"_blank\">the input should display the highlighted suggestion</a>. You design how suggestion is modelled. Therefore, it's your responsibility to tell Autosuggest how to map suggestions to input values.\n\nThis function gets:\n\n* `suggestion` - The suggestion in question\n\nIt should return a string. For example:\n\n```js\nfunction getSuggestionValue(suggestion) {\n  return suggestion.text;\n}\n```\n\n<a name=\"renderSuggestionProp\"></a>\n#### renderSuggestion (required)\n\nUse your imagination to define how suggestions are rendered.\n\n`renderSuggestion` has the following signature:\n\n```js\nfunction renderSuggestion(suggestion, { value, valueBeforeUpDown })\n```\n\nwhere:\n\n* `suggestion` - The suggestion to render\n* `value` - The current value of the input\n* `valueBeforeUpDown` - The value of the input prior to Up/Down interactions. If user didn't interact with Up/Down yet, it will be `null`. It is useful if you want to highlight input's value in the suggestion (a.k.a the match), for example.\n\nIt should return a `ReactElement`. For example:\n\n```js\nfunction renderSuggestion(suggestion) {\n  return (\n    <span>{suggestion.text}</span>\n  );\n}\n```\n\n<a name=\"inputPropsProp\"></a>\n#### inputProps (required)\n\nAutosuggest is a <a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\" target=\"_blank\">controlled component</a>. Therefore, you should pass at least a `value` and an `onChange` callback to the input field. You can pass additional props as well. For example:\n\n```js\nconst inputProps = {\n  value: inputValue,  // `inputValue` usually comes from application state\n  onChange: onChange, // called when input value changes\n  type: 'search',\n  placeholder: 'Enter city or postcode'\n};\n```\n\n`onChange` has the following signature:\n\n```js\nfunction onChange(event, { newValue, method })\n```\n\nwhere:\n\n* `newValue` - the new value of the input field\n* `method` - string describing how the change occurred. The possible values are:\n  * `'down'` - user pressed Down\n  * `'up'` - user pressed Up\n  * `'escape'` - user pressed Escape\n  * `'click'` - user clicked (or tapped) on suggestion\n  * `'type'` - none of the methods above (usually means that user typed something, but can also be that they pressed Backspace, pasted something into the field, etc.)\n\n<a name=\"shouldRenderSuggestionsProp\"></a>\n#### shouldRenderSuggestions (optional)\n\nBy default, suggestions are rendered when input field isn't blank. Feel free to override this behaviour.\n\nThis function gets:\n\n* `value` - The current value of the input\n\nIt should return a boolean.\n\nFor example, to display suggestions only when input is at least 3 characters long, do:\n\n```js\nfunction shouldRenderSuggestions(value) {\n  return value.trim().length > 2;\n}\n```\n\n<a name=\"multiSectionProp\"></a>\n#### multiSection (optional)\n\nBy default, Autosuggest renders a plain list of suggestions.\n\nIf you'd like to have multiple sections (with optional titles), set `multiSection={true}`.\n\n<a name=\"renderSectionTitleProp\"></a>\n#### renderSectionTitle (required when `multiSection={true}`)\n\nWhen rendering [multiple sections](#multiSectionProp), you need to tell Autosuggest how to render a section title.\n\nThis function gets:\n\n* `section` - The section to render (an item in the [suggestions](#suggestionsProp) array)\n\n\nIt should return a `ReactElement`. For example:\n\n```js\nfunction renderSectionTitle(section) {\n  return (\n    <strong>{section.title}</strong>\n  );\n}\n```\n\nIf `renderSectionTitle` returns `null` or `undefined`, section title is not rendered.\n\n<a name=\"getSectionSuggestionsProp\"></a>\n#### getSectionSuggestions (required when `multiSection={true}`)\n\nWhen rendering [multiple sections](#multiSectionProp), you need to tell Autosuggest where to find the suggestions for a given section.\n\nThis function gets:\n\n* `section` - The section to render (an item in the [suggestions](#suggestionsProp) array)\n\n\nIt should return an array of suggestions to render in the given section. For example:\n\n```js\nfunction getSectionSuggestions(section) {\n  return section.suggestions;\n}\n```\n\n**Note:** Sections with no suggestions are not rendered.\n\n<a name=\"onSuggestionSelectedProp\"></a>\n#### onSuggestionSelected (optional)\n\nThis function is called when suggestion is selected. It has the following signature:\n\n```js\nfunction onSuggestionSelected(event, { suggestion, suggestionValue, method })\n```\n\nwhere:\n\n* `suggestion` - the selected suggestion\n* `suggestionValue` - the value of the selected suggestion (equivalent to `getSuggestionValue(suggestion)`)\n* `method` - string describing how user selected the suggestion. The possible values are:\n  * `'click'` - user clicked (or tapped) on the suggestion\n  * `'enter'` - user selected the suggestion using Enter\n\n<a name=\"focusInputOnSuggestionClickProp\"></a>\n#### focusInputOnSuggestionClick (optional)\n\nBy default, `focusInputOnSuggestionClick={true}`, which means that, every time suggestion is clicked, the input will get the focus back.\n\nTo prevent the focus going back to the input, set `focusInputOnSuggestionClick={false}`.\n\nThis may be useful on mobile devices where the keyboard appears when input is focused.\n\nYou might want to do something like this:\n\n```xml\n<Autosuggest focusInputOnSuggestionClick={!isMobile} ... />\n```\n\nwhere `isMobile` is a boolean describing whether Autosuggest operates on a mobile device or not. You can use [kaimallea/isMobile](https://github.com/kaimallea/isMobile), for example, to determine that.\n\n<a name=\"themeProp\"></a>\n#### theme (optional)\n\nAutosuggest comes with no styles.\n\nIt uses <a href=\"https://github.com/markdalgleish/react-themeable\" target=\"_blank\">react-themeable</a> to allow you to style your Autosuggest component using <a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\">CSS Modules</a>, <a href=\"https://github.com/FormidableLabs/radium\" target=\"_blank\">Radium</a>, <a href=\"https://github.com/js-next/react-style\" target=\"_blank\">React Style</a>, <a href=\"https://github.com/jsstyles/jss\" target=\"_blank\">JSS</a>, <a href=\"https://facebook.github.io/react/tips/inline-styles.html\" target=\"_blank\">Inline styles</a>, or even global CSS.\n\nFor example, to style the Autosuggest using CSS Modules, do:\n\n```css\n/* theme.css */\n\n.container { ... }\n.input { ... }\n.suggestionsContainer { ... }\n.suggestion { ... }\n.suggestionFocused { ... }\n...\n```\n\n```js\nimport theme from 'theme.css';\n```\n```xml\n<Autosuggest theme={theme} ... />\n```\n\nWhen not specified, `theme` defaults to:\n\n```js\n{\n  container:                   'react-autosuggest__container',\n  containerOpen:               'react-autosuggest__container--open',\n  input:                       'react-autosuggest__input',\n  suggestionsContainer:        'react-autosuggest__suggestions-container',\n  suggestion:                  'react-autosuggest__suggestion',\n  suggestionFocused:           'react-autosuggest__suggestion--focused',\n  sectionContainer:            'react-autosuggest__section-container',\n  sectionTitle:                'react-autosuggest__section-title',\n  sectionSuggestionsContainer: 'react-autosuggest__section-suggestions-container'\n}\n```\n\nThe following picture illustrates how `theme` keys correspond to Autosuggest DOM structure:\n\n![DOM structure](dom-structure.png)\n\n<a name=\"idProp\"></a>\n#### id (required when multiple Autosuggest components are rendered on a page)\n\nThe only reason `id` exists, is to set ARIA attributes (they require a unique id).\n\nWhen rendering a single Autosuggest, don't set the `id` (it will be set to `'1'`, by default).\n\nWhen rendering multiple Autosuggest components on a page, make sure to give them unique `id`s. For example:\n\n```xml\n<Autosuggest id=\"source\" ... />\n<Autosuggest id=\"destination\" ... />\n```\n\n## Development\n\n```shell\nnpm install\nnpm start\n```\n\nNow, open `http://localhost:3000/demo/dist/index.html` and start hacking!\n\n## Running Tests\n\n```shell\nnpm test\n```\n\n## License\n\n<a href=\"http://moroshko.mit-license.org\" target=\"_blank\">MIT</a>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/moroshko/react-autosuggest/issues"
  },
  "_id": "react-autosuggest@3.6.0",
  "_from": "react-autosuggest@~3.6.0"
}

{
  "name": "globalize",
  "version": "1.1.1",
  "description": "A JavaScript library for internationalization and localization that leverages the official Unicode CLDR JSON data.",
  "keywords": [
    "utility",
    "globalization",
    "internationalization",
    "multilingualization",
    "localization",
    "g11n",
    "i18n",
    "m17n",
    "L10n",
    "localize",
    "format",
    "parse",
    "translate",
    "strings",
    "numbers",
    "dates",
    "times",
    "calendars",
    "plural",
    "plurals",
    "pluralize",
    "cultures",
    "languages",
    "locales",
    "Unicode",
    "CLDR",
    "JSON"
  ],
  "homepage": "https://github.com/jquery/globalize",
  "author": {
    "name": "jQuery Foundation and other contributors",
    "url": "https://github.com/jquery/jquery/blob/master/AUTHORS.txt"
  },
  "maintainers": [
    {
      "name": "JÃ¶rn Zaefferer",
      "email": "joern.zaefferer@gmail.com",
      "url": "http://bassistance.de"
    },
    {
      "name": "Rafael Xavier de Souza",
      "email": "rxaviers@gmail.com",
      "url": "http://rafael.xavier.blog.br"
    }
  ],
  "main": "./dist/node-main.js",
  "files": [
    "CONTRIBUTING.md",
    "dist/",
    "doc/",
    "examples/",
    "LICENSE.txt",
    "README.md"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jquery/globalize.git"
  },
  "bugs": {
    "url": "http://github.com/jquery/globalize/issues"
  },
  "dependencies": {
    "cldrjs": "0.4.4"
  },
  "peerDependencies": {
    "cldr-data": ">=25"
  },
  "devDependencies": {
    "grunt": "0.4.5",
    "grunt-check-dependencies": "0.6.0",
    "grunt-commitplease": "0.0.5",
    "grunt-compare-size": "0.4.0",
    "grunt-contrib-clean": "0.6.0",
    "grunt-contrib-connect": "0.8.0",
    "grunt-contrib-copy": "0.6.0",
    "grunt-contrib-jshint": "0.10.0",
    "grunt-contrib-qunit": "0.7.0",
    "grunt-contrib-requirejs": "0.4.4",
    "grunt-contrib-uglify": "0.6.0",
    "grunt-contrib-watch": "0.6.1",
    "grunt-git-authors": "^3.1.0",
    "grunt-jscs": "1.8.0",
    "gzip-js": "0.3.2",
    "matchdep": "0.3.0"
  },
  "commitplease": {
    "nohook": true
  },
  "license": "MIT",
  "scripts": {
    "test": "grunt"
  },
  "readme": "# Globalize\n\n[![Build Status](https://secure.travis-ci.org/jquery/globalize.svg?branch=master)](http://travis-ci.org/jquery/globalize)\n[![devDependency Status](https://david-dm.org/jquery/globalize/status.svg)](https://david-dm.org/jquery/globalize#info=dependencies)\n[![devDependency Status](https://david-dm.org/jquery/globalize/dev-status.svg)](https://david-dm.org/jquery/globalize#info=devDependencies)\n\nA JavaScript library for internationalization and localization that leverage the\nofficial [Unicode CLDR](http://cldr.unicode.org/) JSON data. The library works both for the browser and as a\nNode.js module.\n\n- [About Globalize](#about-globalize)\n  - [Why globalization?](#why-globalization)\n  - [Why Globalize?](#why-globalize)\n  - [Migrating from Globalize 0.x](#migrating-from-globalize-0x)\n  - [Where to use it?](#where-to-use-it)\n  - [Where does the data come from?](#where-does-the-data-come-from)\n  - [Only load and use what you need](#pick-the-modules-you-need)\n  - [Browser support](#browser-support)\n- [Getting started](#getting-started)\n  - [Requirements](#requirements)\n  - [Installation](#installation)\n  - [Usage](#usage)\n  - [Performance](#performance)\n  - [Compilation and the Runtime modules](#compilation-and-the-runtime-modules)\n  - [Examples](#examples)\n- [API](#api)\n  - [Core](#core-module)\n  - [Date module](#date-module)\n  - [Message module](#message-module)\n  - [Number module](#number-module)\n    - [Currency module](#currency-module)\n  - [Plural module](#plural-module)\n  - [Relative time module](#relative-time-module)\n  - [Unit module](#unit-module)\n  - more to come...\n- [Error reference](#error-reference)\n- [Contributing](#contributing)\n  - [Roadmap](#roadmap)\n- [Development](#development)\n  - [File structure](#file-structure)\n  - [Source files](#source-files)\n  - [Tests](#tests)\n  - [Build](#build)\n\n\n## About Globalize\n\n### Why globalization?\n\nEach language, and the countries that speak that language, have different\nexpectations when it comes to how numbers (including currency and percentages)\nand dates should appear. Obviously, each language has different names for the\ndays of the week and the months of the year. But they also have different\nexpectations for the structure of dates, such as what order the day, month and\nyear are in. In number formatting, not only does the character used to\ndelineate number groupings and the decimal portion differ, but the placement of\nthose characters differ as well.\n\nA user using an application should be able to read and write dates and numbers\nin the format they are accustomed to. This library makes this possible,\nproviding an API to convert user-entered number and date strings - in their\nown format - into actual numbers and dates, and conversely, to format numbers\nand dates into that string format.\n\nEven if the application deals only with the English locale, it may still need\nglobalization to format programming language bytes into human-understandable\nlanguage and vice-versa in an effective and reasonable way. For example, to\ndisplay something better than \"Edited 1 minutes ago\".\n\n### Why Globalize?\n\nGlobalize provides number formatting and parsing, date and time formatting and\nparsing, currency formatting, message formatting (ICU message format pattern),\nand plural support.\n\nDesign Goals.\n\n- Leverages the Unicode CLDR data and follows its UTS#35 specification.\n- Keeps code separate from i18n content. Doesn't host or embed any locale data\n  in the library. Empowers developers to control the loading mechanism of their\n  choice.\n- Allows developers to load as much or as little data as they need. Avoids\n  duplicating data if using multiple i18n libraries that leverage CLDR.\n- Keeps code modular. Allows developers to load the i18n functionalities they\n  need.\n- Runs in browsers and Node.js, consistently across all of them.\n- Makes globalization as easy to use as jQuery.\n\nGlobalize is based on the Unicode Consortium's Common Locale Data Repository\n(CLDR), the largest and most extensive standard repository of locale data\navailable. CLDR is constantly updated and is used by many large applications and\noperating systems, so you'll always have access to the most accurate and\nup-to-date locale data.\n\nGlobalize needs CLDR content to function properly, although it doesn't embed,\nhard-code, or host such content. Instead, Globalize empowers developers to load\nCLDR data the way they want. Vanilla CLDR in its official JSON format (no\npre-processing) is expected to be provided. As a consequence, (a) Globalize\navoids bugs caused by outdated i18n content. Developers can use up-to-date CLDR\ndata directly from Unicode as soon as it's released, without having to wait for\nany pipeline on our side. (b) Developers have full control over which locale\ncoverage they want to provide on their applications. (c) Developers are able to\nshare the same i18n dataset between Globalize and other libraries that leverage\nCLDR. There's no need for duplicating data.\n\nGlobalize is systematically tested against desktop and mobile browsers and\nNode.js. So, using it you'll get consistent results across different browsers\nand across browsers and the server.\n\nGlobalize doesn't use native Ecma-402 yet, which could potentially improve date\nand number formatting performance. Although Ecma-402 support is improving among\nmodern browsers and even Node.js, the functionality and locale coverage level\nvaries between different environments (see Comparing JavaScript Libraries [slide\n25][]). Globalize needs to do more research and testings to use it reliably.\n\nFor alternative libraries and more, check out this [JavaScript globalization\noverview][].\n\n[slide 25]: http://jsi18n.com/jsi18n.pdf\n[JavaScript globalization overview]: http://rxaviers.github.io/javascript-globalization/\n\n### Migrating from Globalize 0.x\n\nAre you coming from Globalize 0.x? Read our [migration guide][] to learn what\nhave changed and how to migrate older 0.x code to up-to-date 1.x.\n\n[migration guide]: doc/migrating-from-0.x.md\n\n### Where to use it?\n\nGlobalize is designed to work both in the [browser](#browser-support), or in\n[Node.js](#usage). It supports both [AMD](#usage) and [CommonJS](#usage).\n\n### Where does the data come from?\n\nGlobalize uses the [Unicode CLDR](http://cldr.unicode.org/), the largest and\nmost extensive standard repository of locale data.\n\nWe do NOT embed any i18n data within our library. However, we make it really\neasy to use. Read [How to get and load CLDR JSON data](#2-cldr-content) for more\ninformation on its usage.\n\n### Pick the modules you need\n\n| File | Minified + gzipped size | Runtime minified + gzipped size | Summary |\n|---|--:|--:|---|\n| globalize.js | 1.5KB | 1.0KB | [Core library](#core-module) |\n| globalize/currency.js | 2.6KB | 0.6KB | [Currency module](#currency-module) provides currency formatting and parsing |\n| globalize/date.js | 5.1KB | 3.8KB | [Date module](#date-module) provides date formatting and parsing |\n| globalize/message.js | 5.4KB | 0.7KB | [Message module](#message-module) provides ICU message format support |\n| globalize/number.js | 3.1KB | 1.8KB | [Number module](#number-module) provides number formatting and parsing |\n| globalize/plural.js | 2.3KB | 0.4KB | [Plural module](#plural-module) provides pluralization support |\n| globalize/relative-time.js | 0.8KB | 0.6KB | [Relative time module](#relative-time-module) provides relative time formatting support |\n| globalize/unit.js | 0.9KB | 0.5KB | [Unit module](#unit-module) provides unit formatting support |\n\n### Browser Support\n\nGlobalize 1.x supports the following browsers:\n\n- Chrome: (Current - 1) or Current\n- Firefox: (Current - 1) or Current\n- Safari: 5.1+\n- Opera: 12.1x, (Current - 1) or Current\n- IE9+\n\n*(Current - 1)* or *Current* denotes that we support the current stable version\nof the browser and the version that preceded it. For example, if the current\nversion of a browser is 24.x, we support the 24.x and 23.x versions.\n\n## Getting Started\n\n    npm install globalize cldr-data\n\n```js\nvar Globalize = require( \"globalize\" );\nGlobalize.load( require( \"cldr-data\" ).entireSupplemental() );\nGlobalize.load( require( \"cldr-data\" ).entireMainFor( \"en\", \"es\" ) );\n\nGlobalize(\"en\").formatDate(new Date());\n// > \"11/27/2015\"\n\nGlobalize(\"es\").formatDate(new Date());\n// > \"27/11/2015\"\n```\n\nRead the [Locales section](#locales) for more information about supported locales. For AMD, bower and other usage examples, see [Examples section](#examples).\n\n### Installation\n\n*By downloading a ZIP or a TAR.GZ...*\n\nClick the github [releases tab](https://github.com/jquery/globalize/releases)\nand download the latest available Globalize package.\n\n*By using a package manager...*\n\nUse bower `bower install globalize`, or npm `npm install globalize cldr-data`.\n\n*By using source files...*\n\n1. `git clone https://github.com/jquery/globalize.git`.\n1. [Build the distribution files](#build).\n\n### Requirements\n\n#### 1. Dependencies\n\nIf you use module loading like ES6 import, CommonJS, or AMD and fetch your code\nusing package managers like *npm* or *bower*, you don't need to worry about this\nand can skip reading this section. Otherwise, you need to satisfy Globalize\ndependencies prior to using it. There is only one external dependency:\n[cldr.js][], which is a CLDR low level manipulation tool. Additionally, you need\nto satisfy the cross-dependencies between modules.\n\n| Module | Dependencies (load in order) |\n|---|---|\n| Core module | [cldr.js][] |\n| Currency module | globalize.js (core), globalize/number.js, and globalize/plural.js (only required for \"code\" or \"name\" styles) |\n| Date module | globalize.js (core) and globalize/number.js |\n| Message module | globalize.js (core) and globalize/plural.js (if using messages that need pluralization support) |\n| Number module | globalize.js (core) |\n| Plural | globalize.js (core) |\n| Relative time module | globalize.js (core), globalize/number.js, and globalize/plural.js |\n| Unit module | globalize.js (core), globalize/number.js, and globalize/plural.js |\n\nAs an alternative to deducing this yourself, use this [online tool](http://johnnyreilly.github.io/globalize-so-what-cha-want/). The tool allows you to select the modules you're interested in using and tells you the Globalize files *and* CLDR JSON that you need.\n\n[cldr.js]: https://github.com/rxaviers/cldrjs\n\n#### 2. CLDR content\n\nGlobalize is the i18n software (the engine). Unicode CLDR is the i18n content\n(the fuel). You need to feed Globalize on the appropriate portions of CLDR prior\nto using it.\n\n*(a) How do I figure out which CLDR portions are appropriate for my needs?*\n\nEach Globalize function requires a special set of CLDR portions. Once you know\nwhich Globalize functionalities you need, you can deduce its respective CLDR\nrequirements. See table below.\n\n| Module | Required CLDR JSON files |\n|---|---|\n| Core module | cldr/supplemental/likelySubtags.json |\n| Currency module | cldr/main/`locale`/currencies.json<br>cldr/supplemental/currencyData.json<br>+CLDR JSON files from number module<br>+CLDR JSON files from plural module for name style support |\n| Date module | cldr/main/`locale`/ca-gregorian.json<br>cldr/main/`locale`/timeZoneNames.json<br>cldr/supplemental/timeData.json<br>cldr/supplemental/weekData.json<br>+CLDR JSON files from number module |\n| Number module | cldr/main/`locale`/numbers.json<br>cldr/supplemental/numberingSystems.json |\n| Plural module | cldr/supplemental/plurals.json (for cardinals)<br>cldr/supplemental/ordinals.json (for ordinals) |\n| Relative time module | cldr/main/`locale`/dateFields.json<br>+CLDR JSON files from number and plural modules |\n| Unit module | cldr/main/`locale`/units.json<br>+CLDR JSON files from number and plural module |\n\nAs an alternative to deducing this yourself, use this [online tool](http://johnnyreilly.github.io/globalize-so-what-cha-want/). The tool allows you to select the modules you're interested in using and tells you the Globalize files *and* CLDR JSON that you need.\n\n*(b) How am I supposed to get and load CLDR content?*\n\nLearn [how to get and load CLDR content...](doc/cldr.md).\n\n### Usage\n\nGlobalize's consumable-files are located in the `./dist` directory. If you\ndon't find it, it's because you are using a development branch. You should\neither use a tagged version or [build the distribution files yourself](#build).\nRead [installation](#installation) above if you need more information on how to\ndownload.\n\nGlobalize can be used for a variety of different i18n tasks, eg. formatting or\nparsing dates, formatting or parsing numbers, formatting messages, etc. You may\nNOT need Globalize in its entirety. For that reason, we made it modular. So, you\ncan cherry-pick the pieces you need, eg. load `dist/globalize.js` to get\nGlobalize core, load `dist/globalize/date.js` to extend Globalize with Date\nfunctionalities, etc.\n\nAn example is worth a thousand words. Check out our [Examples](#examples)\nsection below.\n\n### Performance\n\nWhen formatting or parsing, there's actually a two-step process: (a) the\nformatter (or parser) *creation* and (b) its *execution*, where creation takes\nan order of magnitude more time (more expensive) than execution. In the creation\nphase, Globalize traverses the CLDR tree, processes data (e.g., expands date\npatterns, parses plural rules, etc), and returns a function that actually\nexecutes the formatting or parsing.\n\n```js\n// Formatter creation.\nvar formatter = Globalize.numberFormatter();\n\n// Formatter execution (roughly 10x faster than above).\nformatter( Math.PI );\n// > 3.141\n```\n\nAs a rule of thumb for optimal performance, cache your formatters and parsers.\nFor example: (a) on iterations, generate them outside the loop and reuse while\nlooping; (b) on server applications, generate them in advance and execute when\nrequests arrive.\n\n### Compilation and the Runtime modules\n\nTake advantage of compiling your formatters and/or parsers during build time\nwhen deploying to production. It's much faster than generating them in real-time\nand it's also much smaller (i.e., better loading performance).\n\nYour compiled formatters and parsers allow you to skip a big part of the library\nand also allow you to skip loading CLDR data, because they have already been\ncreated (see [Performance](#performance) above for more information).\n\nTo illustrate, see our [Basic Globalize Compiler example][].\n\n\n#### Globalize Compiler\n\nFor information about the Globalize Compiler CLI or its JavaScript API, see the\n[Globalize Compiler documentation][].\n\n[Globalize Compiler documentation]: https://github.com/jquery-support/globalize-compiler#README\n\n### Examples\n\nThe fastest and easiest way to use Globalize is by integrating it into your\nexisting tools.\n\n- [Application example using webpack and npm](examples/app-npm-webpack/): easy to\n  get started, automated CLDR loading and precompilation for production, but\n  requires npm and webpack knowledge.\n\nIf you're using a different tool than the one above, but you're comfortable\nusing JavaScript modules (such as ES6 modules, CommonJS, or AMD) and package\nmanagers like npm or bower, you may want to check out the following examples.\nNote you'll need to compile your code for production yourself.\n\n- [Basic example using AMD and bower](examples/amd-bower/): feeding Globalize on\n  CLDR is not completely transparent.\n- [Basic example using Node.js and npm](examples/node-npm/): feeding Globalize\n  on CLDR is not completely transparent.\n- [Basic Globalize Compiler example][]: shows how to use Globalize Compiler CLI.\n\n[Basic Globalize Compiler example]: examples/globalize-compiler/\n\nIf you're using none of the tools above, but instead you're using the plain and\nold script tags only, the following example may interest you. Note Globalize\nallows you to go low level like this. But, acknowledge that you'll need to\nhandle dependencies and CLDR loading manually yourself.\n\n- [Basic example using plain JavaScript](examples/plain-javascript/): requires\n  loading CLDR and handling dependencies manually.\n\n## API\n\n### Core module\n\n- **`Globalize.load( cldrJSONData, ... )`**\n\n  This method allows you to load CLDR JSON locale data. `Globalize.load()` is a\n  proxy to `Cldr.load()`.\n\n  [Read more...](doc/api/core/load.md)\n\n- **`Globalize.locale( [locale|cldr] )`**\n\n  Set default locale, or get it if locale argument is omitted.\n\n  [Read more...](doc/api/core/locale.md)\n\n- **`[new] Globalize( locale|cldr )`**\n\n  Create a Globalize instance.\n\n  [Read more...](doc/api/core/constructor.md)\n\n#### Locales\n\nA locale is an identifier (id) that refers to a set of user preferences that\ntend to be shared across significant swaths of the world. In technical terms,\nit's a String composed of three parts: language, script, and region. For\nexample:\n\n| locale | description |\n| --- | --- |\n| *en-Latn-US* | English as spoken in the Unites States in the Latin script. |\n| *en-US* | English as spoken in the Unites States (Latin script is deduced given it's the most likely script used in this place). |\n| *en* | English (United States region and Latin script are deduced given they are respectively the most likely region and script used in this place). |\n| *en-GB* | English as spoken in the United Kingdom (Latin script is deduced given it's the most likely script used in this place). |\n| *en-IN* | English as spoken in India (Latin script is deduced). |\n| *es* | Spanish (Spain region and Latin script are deduced). |\n| *es-MX* | Spanish as spoken in Mexico (Latin script is deduced). |\n| *zh* | Chinese (China region and Simplified Han script are deduced). |\n| *zh-TW* | Chinese as spoken in Taiwan (Traditional Han script is deduced). |\n| *ja* | Japanese (Japan region and Japanese script are deduced). |\n| *de* | German (Germany region and Latin script are deduced). |\n| *pt* | Portuguese (Brazil region and Latin script are deduced). |\n| *pt-PT* | Portuguese as spoken in Portugal (Latin script is deduced). |\n| *fr* | French (France region and Latin script are deduced). |\n| *ru* | Russian (Russia region and Cyrillic script are deduced). |\n| *ar* | Arabic (Egypt region and Arabic script are deduced). |\n\nThe likely deductibility is computed by using CLDR data, which is based on the\npopulation and the suppress-script data in BCP47 (among others). The data is\nheuristically derived, and may change over time.\n\nFigure out the deduced information by looking at the\n`cldr.attributes.maxLanguageId` property of a Globalize instance:\n\n```js\nvar Globalize = require( \"globalize\" );\nGlobalize.load( require( \"cldr-data\" ).entireSupplemental() );\nGlobalize(\"en\").cldr.attributes.maxLanguageId;\n// > \"en-Latn-US\"\n```\n\nGlobalize supports all the locales available in CLDR, which are around 740.\nFor more information, search for coverage charts at the downloads section of\nhttp://cldr.unicode.org/.\n\nRead more details about locale at [UTS#35 locale][].\n\n[UTS#35 locale]: http://www.unicode.org/reports/tr35/#Locale\n\n### Date module\n\n- **`.dateFormatter( [options] )`**\n\n  Return a function that formats a date according to the given `options`. The default formatting is\n  numeric year, month, and day (i.e., `{ skeleton: \"yMd\" }`.\n\n  ```javascript\n  .dateFormatter()( new Date() )\n  // > \"11/30/2010\"\n\n  .dateFormatter({ skeleton: \"GyMMMd\" })( new Date() )\n  // > \"Nov 30, 2010 AD\"\n\n  .dateFormatter({ date: \"medium\" })( new Date() )\n  // > \"Nov 1, 2010\"\n\n  .dateFormatter({ time: \"medium\" })( new Date() )\n  // > \"5:55:00 PM\"\n\n  .dateFormatter({ datetime: \"medium\" })( new Date() )\n  // > \"Nov 1, 2010, 5:55:00 PM\"\n  ```\n\n  [Read more...](doc/api/date/date-formatter.md)\n\n- **`.dateParser( [options] )`**\n\n  Return a function that parses a string representing a date into a JavaScript Date object according\n  to the given `options`. The default parsing assumes numeric year, month, and day (i.e., `{\n  skeleton: \"yMd\" }`).\n\n  ```javascript\n  .dateParser()( \"11/30/2010\" )\n  // > new Date( 2010, 10, 30, 0, 0, 0 )\n\n  .dateParser({ skeleton: \"GyMMMd\" })( \"Nov 30, 2010 AD\" )\n  // > new Date( 2010, 10, 30, 0, 0, 0 )\n\n  .dateParser({ date: \"medium\" })( \"Nov 1, 2010\" )\n  // > new Date( 2010, 10, 30, 0, 0, 0 )\n\n  .dateParser({ time: \"medium\" })( \"5:55:00 PM\" )\n  // > new Date( 2015, 3, 22, 17, 55, 0 ) // i.e., today @ 5:55PM\n\n  .dateParser({ datetime: \"medium\" })( \"Nov 1, 2010, 5:55:00 PM\" )\n  // > new Date( 2010, 10, 30, 17, 55, 0 )\n  ```\n\n  [Read more...](doc/api/date/date-parser.md)\n\n- **`.formatDate( value [, options] )`**\n\n  Alias for `.dateFormatter( [options] )( value )`.\n\n- **`.parseDate( value [, options] )`**\n\n  Alias for `.dateParser( [options] )( value )`.\n\n### Message module\n\n- **`Globalize.loadMessages( json )`**\n\n  Load messages data.\n\n  [Read more...](doc/api/message/load-messages.md)\n\n- **`.messageFormatter( path ) â¡ function( [variables] )`**\n\n  Return a function that formats a message (using ICU message format pattern)\n  given its path and a set of variables into a user-readable string. It supports\n  pluralization and gender inflections.\n\n  ```javascript\n  .messageFormatter( \"task\" )( 1000 )\n  // > \"You have 1,000 tasks remaining\"\n\n  .messageFormatter( \"like\" )( 3 )\n  // > \"You and 2 others liked this\"\n  ```\n\n  [Read more...](doc/api/message/message-formatter.md)\n\n- **`.formatMessage( path [, variables ] )`**\n\n  Alias for `.messageFormatter( path )([ variables ])`.\n\n### Number module\n\n- **`.numberFormatter( [options] )`**\n\n  Return a function that formats a number according to the given options or locale's defaults.\n\n  ```javascript\n  .numberFormatter()( pi )\n  // > \"3.142\"\n\n  .numberFormatter({ maximumFractionDigits: 5 })( pi )\n  // > \"3.14159\"\n\n  .numberFormatter({ round: \"floor\" })( pi )\n  // > \"3.141\"\n\n  .numberFormatter({ minimumFractionDigits: 2 })( 10000 )\n  // > \"10,000.00\"\n\n  .numberFormatter({ style: \"percent\" })( 0.5 )\n  // > \"50%\"\n  ```\n\n  [Read more...](doc/api/number/number-formatter.md)\n\n- **`.numberParser( [options] )`**\n\n  Return a function that parses a string representing a number according to the given options or\n  locale's defaults.\n\n  ```javascript\n  .numberParser()( \"3.14159\" )\n  // > 3.14159\n\n  .numberParser()( \"10,000.00\" )\n  // > 10000\n\n  .numberParser({ style: \"percent\" })( \"50%\" )\n  // > 0.5\n  ```\n\n  [Read more...](doc/api/number/number-parser.md)\n\n- **`.formatNumber( value [, options] )`**\n\n  Alias for `.numberFormatter( [options] )( value )`.\n\n- **`.parseNumber( value [, options] )`**\n\n  Alias for `.numberParser( [options] )( value )`.\n\n#### Currency module\n\n- **`.currencyFormatter( currency [, options] )`**\n\n  Return a function that formats a currency according to the given options or\n  locale's defaults.\n\n  ```javascript\n  .currencyFormatter( \"USD\" )( 1 )\n  // > \"$1.00\"\n\n  .currencyFormatter( \"USD\", { style: \"accounting\" })( -1 )\n  // > \"($1.00)\"\n\n  .currencyFormatter( \"USD\", { style: \"name\" })( 69900 )\n  // > \"69,900.00 US dollars\"\n\n  .currencyFormatter( \"USD\", { style: \"code\" })( 69900 )\n  // > \"69,900.00 USD\"\n\n  .currencyFormatter( \"USD\", { round: \"ceil\" })( 1.491 )\n  // > \"$1.50\"\n  ```\n\n  [Read more...](doc/api/currency/currency-formatter.md)\n\n- **`.formatCurrency( value, currency [, options] )`**\n\n  Alias for `.currencyFormatter( currency [, options] )( value )`.\n\n### Plural module\n\n- **`.pluralGenerator( [options] )`**\n\n  Return a function that returns the value's corresponding plural group: `zero`,\n  `one`, `two`, `few`, `many`, or `other`.\n\n  The function may be used for cardinals or ordinals.\n\n  ```javascript\n  .pluralGenerator()( 0 )\n  // > \"other\"\n\n  .pluralGenerator()( 1 )\n  // > \"one\"\n\n  .pluralGenerator({ type: \"ordinal\" })( 1 )\n  // > \"one\"\n\n  .pluralGenerator({ type: \"ordinal\" })( 2 )\n  // > \"two\"\n  ```\n\n  [Read more...](doc/api/plural/plural-generator.md)\n\n- **`.plural( value[, options ] )`**\n\n  Alias for `.pluralGenerator( [options] )( value )`.\n\n### Relative time module\n\n- **`.relativeTimeFormatter( unit [, options] )`**\n\n Returns a function that formats a relative time according to the given unit, options, and the\n default/instance locale.\n\n  ```javascript\n  .relativeTimeFormatter( \"day\" )( 1 )\n  // > \"tomorrow\"\n\n  .relativeTimeFormatter( \"month\" )( -1 )\n  // > \"last month\"\n\n  .relativeTimeFormatter( \"month\" )( 3 )\n  // > \"in 3 months\"\n  ```\n\n  [Read more...](doc/api/relative-time/relative-time-formatter.md)\n\n- **`.formatRelativeTime( value, unit [, options] )`**\n\n  Alias for `.relativeTimeFormatter( unit, options )( value )`.\n\n## Unit module\n\n- **`.unitFormatter( unit [, options] )`**\n\n  Returns a function that formats a unit according to the given unit, options, and the\n  default/instance locale.\n\n  ```javascript\n  .unitFormatter( \"second\" )( 10 )\n  // > \"10 seconds\"\n\n  .unitFormatter( \"second\", { form: \"short\" } )( 10 )\n  // > \"10 secs\"\n\n  .unitFormatter( \"second\", { form: \"narrow\" } )( 10 )\n  // > \"10s\"\n  ```\n\n  [Read more...](doc/api/unit/unit-formatter.md)\n\n- **`.formatUnit( value, unit [, options] )`**\n\n  Alias for `.unitFormatter( unit, options )( value )`.\n\n## Error reference\n\n### CLDR Errors\n\n- **`E_INVALID_CLDR`**\n\n  Thrown when a CLDR item has an invalid or unexpected value.\n\n [Read more...](doc/error/e-invalid-cldr.md)\n\n- **`E_MISSING_CLDR`**\n\n  Thrown when any required CLDR item is NOT found.\n\n  [Read more...](doc/error/e-missing-cldr.md)\n\n### Parameter Errors\n\n- **`E_INVALID_PAR_TYPE`**\n\n  Thrown when a parameter has an invalid type on any static or instance methods.\n\n  [Read more...](doc/error/e-invalid-par-type.md)\n\n- **`E_INVALID_PAR_VALUE`**\n\n  Thrown for certain parameters when the type is correct, but the value is\n  invalid.\n\n  [Read more...](doc/error/e-invalid-par-value.md)\n\n- **`E_MISSING_PARAMETER`**\n\n  Thrown when a required parameter is missing on any static or instance methods.\n\n  [Read more...](doc/error/e-missing-parameter.md)\n\n- **`E_PAR_OUT_OF_RANGE`**\n\n  Thrown when a parameter is not within a valid range of values.\n\n  [Read more...](doc/error/e-par-out-of-range.md)\n\n### Other Errors\n\n- **`E_DEFAULT_LOCALE_NOT_DEFINED`**\n\n  Thrown when any static method, eg. `Globalize.formatNumber()` is used prior to\n  setting the Global locale with `Globalize.locale( <locale> )`.\n\n  [Read more...](doc/error/e-default-locale-not-defined.md)\n\n- **`E_MISSING_PLURAL_MODULE`**\n\n  Thrown when plural module is needed, but not loaded, eg. to format currencies\n  using the named form.\n\n  [Read more...](doc/error/e-missing-plural-module.md)\n\n- **`E_UNSUPPORTED`**\n\n  Thrown for unsupported features, eg. to format unsupported date patterns.\n\n  [Read more...](doc/error/e-unsupported.md)\n\n\n## Contributing\n\nIf you are having trouble using Globalize after reading the documentation\ncarefully, please post a question to [StackOverflow with the\n\"javascript-globalize\" tag][]. Questions that include a minimal demo are more\nlikely to receive responses.\n\nIn the spirit of open source software development, we always encourage\ncommunity code contribution. To help you get started and before you jump into\nwriting code, be sure to read [CONTRIBUTING.md](CONTRIBUTING.md).\n\n[StackOverflow with the \"javascript-globalize\" tag]: http://stackoverflow.com/tags/javascript-globalize\n\nFor ideas where to start contributing, see the following queries to find what\nbest suites your interest: [quick changes][], [new features][], [bug fixes][],\n[documentation improvements][], [date module][], [currency module][], [message\nmodule][], [number module][], [plural module][], [relative time module][]. Last\nbut not least, feel free to [get in touch](http://irc.jquery.org/).\n\n[bug fixes]: https://github.com/jquery/globalize/labels/bug\n[documentation improvements]: https://github.com/jquery/globalize/labels/docs\n[new features]: https://github.com/jquery/globalize/labels/new%20feature\n[quick changes]: https://github.com/jquery/globalize/labels/quick%20changes\n\n[currency module]: https://github.com/jquery/globalize/labels/currency%20module\n[date module]: https://github.com/jquery/globalize/labels/date%20module\n[message module]: https://github.com/jquery/globalize/labels/message%20module\n[number module]: https://github.com/jquery/globalize/labels/number%20module\n[plural module]: https://github.com/jquery/globalize/labels/plural%20module\n[relative time module]: https://github.com/jquery/globalize/labels/relative%20time%20module\n\n### Roadmap\n\nOur roadmap is the collection of all open issues and pull requests where you can\nfind:\n\n- [Ongoing work][] lists our current sprint. Here you find where we're actively\n  working on at this very moment. Priority is determined by the community needs\n  and volunteering. If there is anything you want to be done, share your\n  thoughts with us on any existing or new issue and especially volunteer to do\n  it.\n- [Everything else][] is potential next work that you could help us to\n  accomplish now. Releases are published following semver rules as often as\n  possible.\n\n[Ongoing work]: https://github.com/jquery/globalize/labels/Current%20Sprint\n[Everything else]: https://github.com/jquery/globalize/issues?utf8=%E2%9C%93&q=is%3Aopen+-label%3A%22Current+Sprint%22+\n\n## Development\n\n### File structure\n```\nâââ bower.json (metadata file)\nâââ CONTRIBUTING.md (doc file)\nâââ dist/ (consumable files, the built files)\nâââ external/ (external dependencies, eg. cldr.js, QUnit, RequireJS)\nâââ Gruntfile.js (Grunt tasks)\nâââ LICENSE.txt (license file)\nâââ package.json (metadata file)\nâââ README.md (doc file)\nâââ src/ (source code)\nâ   âââ build/ (build helpers, eg. intro, and outro)\nâ   âââ common/ (common function helpers across modules)\nâ   âââ core.js (core module)\nâ   âââ date/ (date source code)\nâ   âââ date.js (date module)\nâ   âââ message.js (message module)\nâ   âââ number.js (number module)\nâ   âââ number/ (number source code)\nâ   âââ plural.js (plural module)\nâ   âââ plural/ (plural source code)\nâ   âââ relative-time.js (relative time module)\nâ   âââ relative-time/ (relative time source code)\nâ   âââ unit.js (unit module)\nâ   âââ unit/ (unit source code)\nâ   âââ util/ (basic JavaScript helpers polyfills, eg array.map)\nâââ test/ (unit and functional test files)\n    âââ fixtures/ (CLDR fixture data)\n    âââ functional/ (functional tests)\n    âââ functional.html\n    âââ functional.js\n    âââ unit/ (unit tests)\n    âââ unit.html\n    âââ unit.js\n```\n\n### Source files\n\nThe source files are as granular as possible. When combined to generate the\nbuild file, all the excessive/overhead wrappers are cut off. It's following\nthe same build model of jQuery and Modernizr.\n\nCore, and all modules' public APIs are located in the `src/` directory, ie.\n`core.js`, `date.js`, `message.js`, `number.js`, and `plural.js`.\n\n### Install development external dependencies\n\nInstall Grunt and external dependencies. First, install the\n[grunt-cli](http://gruntjs.com/getting-started#installing-the-cli) and\n[bower](http://bower.io/) packages if you haven't before. These should be\ninstalled globally (like this: `npm install -g grunt-cli bower`). Then:\n\n```bash\nnpm install && bower install\n```\n\n### Tests\n\nTests can be run either in the browser or using Node.js (via Grunt) after having\ninstalled the external development dependencies (for more details, see above).\n\n***Unit tests***\n\nTo run the unit tests, run `grunt test:unit`, or run `grunt connect:keepalive`\nand open `http://localhost:9001/test/unit.html` in a browser. It tests the very\nspecific functionality of each function (sometimes internal/private).\n\nThe goal of the unit tests is to make it easy to spot bugs, easy to debug.\n\n***Functional tests***\n\nTo run the functional tests, create the dist files by running `grunt`. Then, run\n`grunt test:functional`, or open `http://localhost:9001/test/functional.html` in\na browser. Note that `grunt` will automatically run unit and functional tests\nfor you to ensure the built files are safe.\n\nThe goal of the functional tests is to ensure that everything works as expected\nwhen it is combined.\n\n### Build\n\nBuild the distribution files after having installed the external development\ndependencies (for more details, see above).\n\n```bash\ngrunt\n```\n",
  "readmeFilename": "README.md",
  "_id": "globalize@1.1.1",
  "dist": {
    "shasum": "9eb0b190bc33a0d69eb12c76240e0cc38895c7b3"
  },
  "_from": "globalize@",
  "_resolved": "https://registry.npmjs.org/globalize/-/globalize-1.1.1.tgz"
}

{
  "name": "cldr-data",
  "version": "28.0.3",
  "keywords": [
    "unicode",
    "CLDR",
    "JSON",
    "data"
  ],
  "description": "Npm module for Unicode CLDR JSON data",
  "homepage": "https://github.com/rxaviers/cldr-data-npm",
  "repository": {
    "type": "git",
    "url": "git://github.com/rxaviers/cldr-data-npm.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rxaviers/cldr-data-npm/blob/master/LICENSE-MIT"
    }
  ],
  "author": {
    "name": "Rafael Xavier de Souza",
    "email": "rxaviers@gmail.com",
    "url": "http://rafael.xavier.blog.br"
  },
  "main": "index.js",
  "scripts": {
    "install": "node install.js",
    "test": "grunt && node test/index.js"
  },
  "dependencies": {
    "cldr-data-downloader": "0.2.x",
    "glob": "5.x.x"
  },
  "devDependencies": {
    "grunt": "0.4.x",
    "grunt-contrib-jshint": "0.10.x",
    "grunt-dco": "0.0.3",
    "matchdep": "*"
  },
  "readme": "# Npm's cldr-data\n\nNpm module for [Unicode CLDR JSON][] data.\n\n[Unicode CLDR JSON]: http://cldr.unicode.org/index/cldr-spec/json\n\n## Goal\n\n- Allow i18n libraries to define CLDR data as versioned \"peer\" dependency.\n- Provide tools to assist (in other words, ease the pain) on fetching the data.\n\nBonus goals\n\n- Optimal for backend development. (Frontend, see [Bower's cldr-data][]).\n- Optimal for Node.js environment. (AMD, see [Bower's cldr-data][]).\n\n[Bower's cldr-data]: https://github.com/rxaviers/cldr-data-bower\n\n## Usage\n\n### For libraries\n\nOn the `package.json` of your i18n library, define its CLDR data dependency by\nusing the *peerDependencies* property.\n\n    \"peerDependencies\": {\n      \"cldr-data\": \">=26\"\n    }\n\nOn your library, access CLDR JSON data using `require(\"cldr-data\")`.\n\n```javascript\nfunction Pluralize(locale) {\n  var plurals = require(\"cldr-data/supplemental/plurals\");\n  var language = extractLanguageFrom(locale);\n\n  // Your awesome pluralization logic\n  pluralForm = doAwesomeStuffWith(\n    plurals.supplemental[\"plurals-type-cardinal\"][language]\n  );\n\n  return pluralForm;\n}\n```\n\nFor your convinience, use cldr-data in conjunction with [cldr.js][]. You can\nfind more details switching to the [Foo Number Format Library Example][] or\n[Application Example][] branches.\n\n[Foo Number Format Library Example]: https://github.com/rxaviers/cldr-data-npm/tree/example-library-foo\n[Application Example]: https://github.com/rxaviers/cldr-data-npm/tree/example-application\n[cldr.js]: https://github.com/rxaviers/cldrjs\n\n### For applications\n\nOn the `package.json` of your applications, define its CLDR data dependency by\nusing the *dependencies* or *devDependencies* property.\n\n    \"dependencies\": {\n      \"cldr-data\": \"26\",\n      \"libraries-that-use-cldr-data\": \"x\"\n    }\n\n#### Locale coverage\n\nBy default, the locale coverage installed is **core**, which Unicode defines as\nthe top tier languages and is equivalent to the `json.zip` content. There are\ntwo ways to modify the installation and get the **full** coverage instead.\n\n*Use the environment variable `CLDR_COVERAGE`*\n\nOn the command line, set the locale coverage using the environment variable.\n\n```\n$ CLDR_COVERAGE=full npm install\n```\n\n*Use the package.json `cldr-data-coverage` property*\n\nOn the `package.json` of you application, set the locale coverage using the\n`cldr-data-coverage` property.\n\n```\n{\n  ...\n  \"cldr-data-coverage\": \"full\",\n  ...\n}\n```\n\n## License\n\nMIT Â© [Rafael Xavier de Souza](http://rafael.xavier.blog.br)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rxaviers/cldr-data-npm/issues"
  },
  "_id": "cldr-data@28.0.3",
  "dist": {
    "shasum": "b439c1f905f9b1d341cdab858c3d28437276fe0c"
  },
  "_from": "cldr-data@",
  "_resolved": "https://registry.npmjs.org/cldr-data/-/cldr-data-28.0.3.tgz"
}
